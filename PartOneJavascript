INTRODUCTION TO JAVASCRIPT
// String Concatenation
// Operators aren’t just for numbers! When a + operator is used on two strings, it appends the right string to the left string:

// console.log('hi' + 'ya'); // Prints 'hiya'
// console.log('wo' + 'ah'); // Prints 'woah'
// console.log('I love to ' + 'code.')
// // Prints 'I love to code.'
// This process of appending one string to another is called concatenation. Notice in the third example we had to make sure to include a space at the end of the first string. The computer will join the strings exactly, so we needed to make sure to include the space we wanted between the two strings.

// console.log('front ' + 'space'); 
// // Prints 'front space'
// console.log('back' + ' space'); 
// // Prints 'back space'
// console.log('no' + 'space'); 
// // Prints 'nospace'
// console.log('middle' + ' ' + 'space'); 
// // Prints 'middle space'
// Just like with regular math, we can combine, or chain, our operations to get a final result:

// console.log('One' + ', ' + 'two' + ', ' + 'three!'); 
// // Prints 'One, two, three!'
// Instructions
// 1.
// Inside a console.log() statement, concatenate the two strings 'Hello' and 'World'.

// Note: You should concatenate the two strings exactly (without introducing any additional characters).


// Stuck? Get a hint
// 2.
// We left off the space last time. Create a second console.log() statement in which you concatenate the strings 'Hello' and 'World', but this time make sure to also include a space (' ') between the two words.

console.log('Hello' + 'World')
console.log('Hello' + ' ' + 'World' )





// Properties
// When you introduce a new piece of data into a JavaScript program, the browser saves it as an instance of the data type. Every string instance has a property called length that stores the number of characters in that string. You can retrieve property information by appending the string with a period and the property name:

// console.log('Hello'.length); // Prints 5
// The . is another operator! We call it the dot operator.

// In the example above, the value saved to the length property is retrieved from the instance of the string, 'Hello'. The program prints 5 to the console, because Hello has five characters in it.

// Instructions
// 1.
// Use the .length property to log the number of characters in the following string to the console:

// 'Teaching the world how to code'

console.log('Teaching the world how to code'.length)


// Methods
// Remember that methods are actions we can perform. JavaScript provides a number of string methods.

// We call, or use, these methods by appending an instance with:

// a period (the dot operator)
// the name of the method
// opening and closing parentheses
// E.g. 'example string'.methodName().

// Does that syntax look a little familiar? When we use console.log() we’re calling the .log() method on the console object. Let’s see console.log() and some real string methods in action!

// console.log('hello'.toUpperCase()); // Prints 'HELLO'
// console.log('Hey'.startsWith('H')); // Prints true
// Let’s look at each of the lines above:

// On the first line, the .toUpperCase() method is called on the string instance 'hello'. The result is logged to the console. This method returns a string in all capital letters: 'HELLO'.
// On the second line, the .startsWith() method is called on the string instance 'Hey'. This method also accepts the character 'H' as an input, or argument, between the parentheses. Since the string 'Hey' does start with the letter 'H', the method returns the boolean true.
// You can find a list of built-in string methods in the JavaScript documentation. Developers use documentation as a reference tool. It describes JavaScript’s keywords, methods, and syntax.

// Instructions
// 1.
// Use the .toUpperCase() method to log the string 'Codecademy' to the console in all capital letters.


// Stuck? Get a hint
// 2.
// In the second console.log() statement in app.js, we have a string ' Remove whitespace ' which has spaces before and after the words 'Remove whitespace'.

// If we browse the JavaScript string documentation, we find several built-in string methods that each accomplish a different goal. The one method that seems ideal for us is .trim().

// Use the method to remove the whitespace at the beginning and end of the string in the second console.log() statement.

// Use .toUpperCase() to log 'Codecademy' in all uppercase letters
console.log('Codecademy'.toUpperCase());

// Use a string method to log the following string without whitespace at the beginning and end of it.
console.log('    Remove whitespace   '.trim());



// INTRODUCTION TO JAVASCRIPT
// Built-in Objects
// In addition to console, there are other objects built into JavaScript. Down the line, you’ll build your own objects, but for now these “built-in” objects are full of useful functionality.

// For example, if you wanted to perform more complex mathematical operations than arithmetic, JavaScript has the built-in Math object.

// The great thing about objects is that they have methods! Let’s call the .random() method from the built-in Math object:

// console.log(Math.random()); // Prints a random number between 0 and 1
// In the example above, we called the .random() method by appending the object name with the dot operator, the name of the method, and opening and closing parentheses. This method returns a random number between 0 (inclusive) and 1 (exclusive).

// To generate a random number between 0 and 50, we could multiply this result by 50, like so:

// Math.random() * 50;
// The example above will likely evaluate to a decimal. To ensure the answer is a whole number, we can take advantage of another useful Math method called Math.floor().

// Math.floor() takes a decimal number, and rounds down to the nearest whole number. You can use Math.floor() to round down a random number like this:

// Math.floor(Math.random() * 50);
// In this case:

// Math.random generates a random number between 0 and 1.
// We then multiply that number by 50, so now we have a number between 0 and 50.
// Then, Math.floor() rounds the number down to the nearest whole number.
// If you wanted to see the number printed to the terminal, you would still need to use a console.log() statement:

// console.log(Math.floor(Math.random() * 50)); // Prints a random whole number between 0 and 50
// To see all of the properties and methods on the Math object, take a look at the documentation here.

// Instructions
// 1.
// Inside of a console.log(), create a random number with Math.random(), then multiply it by 100.


// Stuck? Get a hint
// 2.
// Now, use Math.floor() to make the output a whole number.

// Inside the console.log() you wrote in the last step, put the existing Math.random() * 100 code inside the parentheses of Math.floor().


// Stuck? Get a hint
// 3.
// Find a method on the JavaScript Math object that returns the smallest integer greater than or equal to a decimal number.

// Use this method with the number 43.8. Log the answer to the console.


// Stuck? Get a hint
// 4.
// Use the JavaScript documentation to find a method on the built-in Number object that checks if a number is an integer.

// Put the number 2017 in the parentheses of the method and use console.log() to print the result.

console.log(Math.ceil(43.8))


console.log(Number.isInteger(2017))



// Review
// Let’s take one more glance at the concepts we just learned:

// Data is printed, or logged, to the console, a panel that displays messages, with console.log().
// We can write single-line comments with // and multi-line comments between /* and */.
// There are 7 fundamental data types in JavaScript: strings, numbers, booleans, null, undefined, symbol, and object.
// Numbers are any number without quotes: 23.8879
// Strings are characters wrapped in single or double quotes: 'Sample String'
// The built-in arithmetic operators include +, -, *, /, and %.
// Objects, including instances of data types, can have properties, stored information. The properties are denoted with a . after the name of the object, for example: 'Hello'.length.
// Objects, including instances of data types, can have methods which perform actions. Methods are called by appending the object or instance with a period, the method name, and parentheses. For example: 'hello'.toUpperCase().
// We can access properties and methods by using the ., dot operator.
// Built-in objects, including Math, are collections of methods and properties that JavaScript provides.
// Code Editor
// Output-only Terminal
// Output:
 


Create a Variable: var
// There were a lot of changes introduced in the ES6 version of JavaScript in 2015. One of the biggest changes was two new keywords, let and const, to create, or declare, variables. Prior to the ES6, programmers could only use the var keyword to declare variables.

// var myName = 'Arya';
// console.log(myName);
// // Output: Arya
// Let’s consider the example above:

// var, short for variable, is a JavaScript keyword that creates, or declares, a new variable.
// myName is the variable’s name. Capitalizing in this way is a standard convention in JavaScript called camel casing. In camel casing you group words into one, the first word is lowercase, then every word that follows will have its first letter uppercased. (e.g. camelCaseEverything).
// = is the assignment operator. It assigns the value ('Arya') to the variable (myName).
// 'Arya' is the value assigned (=) to the variable myName. You can also say that the myName variable is initialized with a value of 'Arya'.
// After the variable is declared, the string value 'Arya' is printed to the console by referencing the variable name: console.log(myName).
// There are a few general rules for naming variables:

// Variable names cannot start with numbers.
// Variable names are case sensitive, so myName and myname would be different variables. It is bad practice to create two variables that have the same name using different cases.
// Variable names cannot be the same as keywords. For a comprehensive list of keywords check out MDN’s keyword documentation.
// Note: In the next exercises, we will learn why ES6’s let and const are the preferred variable keywords by many programmers. Because there is still a ton of code written prior to ES6, it’s helpful to be familiar with the pre-ES6 var keyword.

// If you want to learn more about var and the quirks associated with it, check out the MDN var documentation.

// Instructions
// 1.
// Declare a variable named favoriteFood using the var keyword and assign to it the string 'pizza'.


// Stuck? Get a hint
// 2.
// Declare a variable named numOfSlices using the var keyword and assign to it the number 8.


// Stuck? Get a hint
// 3.
// Under the numOfSlices variable, use console.log() to print the value saved to favoriteFood.

// On the following line, use console.log() to print the value saved to numOfSlices.


var favoriteFood = 'pizza';
var numOfSlices = 8;

console.log(favoriteFood);
console.log(numOfSlices);



// As mentioned in the previous exercise, the let keyword was introduced in ES6. The let keyword signals that the variable can be reassigned a different value. Take a look at the example:

// let meal = 'Enchiladas';
// console.log(meal); // Output: Enchiladas
// meal = 'Burrito';
// console.log(meal); // Output: Burrito
// Another concept that we should be aware of when using let (and even var) is that we can declare a variable without assigning the variable a value. In such a case, the variable will be automatically initialized with a value of undefined:

// let price;
// console.log(price); // Output: undefined
// price = 350;
// console.log(price); // Output: 350
// Notice in the example above:

// If we don’t assign a value to a variable declared using the let keyword, it automatically has a value of undefined.
// We can reassign the value of the variable.
// Instructions
// 1.
// Create a let variable called changeMe and set it equal to the boolean true.


// Stuck? Get a hint
// 2.
// On the line after changeMe is declared, set the value of changeMe to be the boolean false.

// To check if changeMe was reassigned, log the value saved to changeMe to the console.


// Stuck? Get a hint

let changeMe = true;
changeMe = false;

console.log(changeMe);


// Create a Variable: const
// The const keyword was also introduced in ES6, and is short for the word constant. Just like with var and let you can store any value in a const variable. The way you declare a const variable and assign a value to it follows the same structure as let and var. Take a look at the following example:

// const myName = 'Gilberto';
// console.log(myName); // Output: Gilberto
// However, a const variable cannot be reassigned because it is constant. If you try to reassign a const variable, you’ll get a TypeError.

// Constant variables must be assigned a value when declared. If you try to declare a const variable without a value, you’ll get a SyntaxError.

// If you’re trying to decide between which keyword to use, let or const, think about whether you’ll need to reassign the variable later on. If you do need to reassign the variable use let, otherwise, use const.

// Instructions
// 1.
// Create a constant variable named entree and set it to equal to the string 'Enchiladas'.


// Stuck? Get a hint
// 2.
// Just to check that you’ve saved the value of 'Enchiladas' to entree, log the value of entree to the console.


// Stuck? Get a hint
// 3.
// Great, let’s see what happens if you try to reassign a constant variable.

// Paste the following code to the bottom of your program.

// entree = 'Tacos'
// This code throws the following error when you run your code:

// TypeError: Assignment to constant variable.
// After you clear this checkpoint, if you want to see about another quirk of const in action open the hint!




const entree = 'Enchiladas';
console.log(entree)

entree = 'Tacos'






// Mathematical Assignment Operators
// Let’s consider how we can use variables and math operators to calculate new values and assign them to a variable. Check out the example below:

// let w = 4;
// w = w + 1;
 
// console.log(w); // Output: 5
// In the example above, we created the variable w with the number 4 assigned to it. The following line, w = w + 1, increases the value of w from 4 to 5.

// Another way we could have reassigned w after performing some mathematical operation on it is to use built-in mathematical assignment operators. We could re-write the code above to be:

// let w = 4;
// w += 1;
 
// console.log(w); // Output: 5
// In the second example, we used the += assignment operator to reassign w. We’re performing the mathematical operation of the first operator + using the number to the right, then reassigning w to the computed value.

// We also have access to other mathematical assignment operators: -=, *=, and /= which work in a similar fashion.

// let x = 20;
// x -= 5; // Can be written as x = x - 5
// console.log(x); // Output: 15
 
// let y = 50;
// y *= 2; // Can be written as y = y * 2
// console.log(y); // Output: 100
 
// let z = 8;
// z /= 2; // Can be written as z = z / 2
// console.log(z); // Output: 4
// Let’s practice using these mathematical assignment operators!

// Instructions
// 1.
// Use the += mathematical assignment operator to increase the value stored in levelUp by 5.


// Stuck? Get a hint
// 2.
// Use the -= mathematical assignment operator to decrease the value stored in powerLevel by 100.


// Stuck? Get a hint
// 3.
// Use the *= mathematical assignment operator to multiply the value stored in multiplyMe by 11.


// Stuck? Get a hint
// 4.
// Use the /= mathematical assignment operator to divide the value stored in quarterMe by 4.


let levelUp = 10;
let powerLevel = 9001;
let multiplyMe = 32;
let quarterMe = 1152;

// Use the mathematical assignments in the space below:


levelUp += 5;
powerLevel -= 100;
multiplyMe *= 11;
quarterMe /= 4;




// These console.log() statements below will help you check the values of the variables.
// You do not need to edit these statements. 
console.log('The value of levelUp:', levelUp); 
console.log('The value of powerLevel:', powerLevel); 
console.log('The value of multiplyMe:', multiplyMe); 
console.log('The value of quarterMe:', quarterMe);





// The Increment and Decrement Operator
// Other mathematical assignment operators include the increment operator (++) and decrement operator (--).

// The increment operator will increase the value of the variable by 1. The decrement operator will decrease the value of the variable by 1. For example:

// let a = 10;
// a++;
// console.log(a); // Output: 11
// let b = 20;
// b--;
// console.log(b); // Output: 19
// Just like the previous mathematical assignment operators (+=, -=, *=, /=), the variable’s value is updated and assigned as the new value of that variable.

// Instructions
// 1.
// Using the increment operator, increase the value of gainedDollar.


// Stuck? Get a hint
// 2.
// Using the decrement operator, decrease the value of lostDollar.

let gainedDollar = 3;
let lostDollar = 50;

gainedDollar++;
lostDollar--;



String Concatenation with Variables
// In previous exercises, we assigned strings to variables. Now, let’s go over how to connect, or concatenate, strings in variables.

// The + operator can be used to combine two string values even if those values are being stored in variables:

// let myPet = 'armadillo';
// console.log('I own a pet ' + myPet + '.'); 
// // Output: 'I own a pet armadillo.'
// In the example above, we assigned the value 'armadillo' to the myPet variable. On the second line, the + operator is used to combine three strings: 'I own a pet', the value saved to myPet, and '.'. We log the result of this concatenation to the console as:

// I own a pet armadillo.
// Instructions
// 1.
// Create a variable named favoriteAnimal and set it equal to your favorite animal.


// Stuck? Get a hint
// 2.
// Use console.log() to print 'My favorite animal: ANIMAL' to the console. Use string concatenation so that ANIMAL is replaced with the value in your favoriteAnimal variable.

var favoriteAnimal = 'Dog';
console.log('My favorite animal:'+ favoriteAnimal)

// String Interpolation
// In the ES6 version of JavaScript, we can insert, or interpolate, variables into strings using template literals. Check out the following example where a template literal is used to log strings together:

// const myPet = 'armadillo';
// console.log(`I own a pet ${myPet}.`);
// // Output: I own a pet armadillo.
// Notice that:

// a template literal is wrapped by backticks ` (this key is usually located on the top of your keyboard, left of the 1 key).
// Inside the template literal, you’ll see a placeholder, ${myPet}. The value of myPet is inserted into the template literal.
// When we interpolate `I own a pet ${myPet}.`, the output we print is the string: 'I own a pet armadillo.'
// One of the biggest benefits to using template literals is the readability of the code. Using template literals, you can more easily tell what the new string will be. You also don’t have to worry about escaping double quotes or single quotes.

// Instructions
// 1.
// Create a variable called myName and assign it your name.


// Stuck? Get a hint
// 2.
// Create a variable called myCity and assign it your favorite city’s name.

// 3.
// Use a single template literal to interpolate your variables into the sentence below. Use console.log() to print your sentence to the console in the following format:

// My name is NAME. My favorite city is CITY.
// Replace NAME and CITY in the string above by interpolating the values saved to myName and myCity.

var myName = 'Tim';
var myCity = 'Austin';
console.log(`My name is ${myName}. My favorite city is ${myCity}.`)



// typeof operator
// While writing code, it can be useful to keep track of the data types of the variables in your program. If you need to check the data type of a variable’s value, you can use the typeof operator.

// The typeof operator checks the value to its right and returns, or passes back, a string of the data type.

// const unknown1 = 'foo';
// console.log(typeof unknown1); // Output: string
 
// const unknown2 = 10;
// console.log(typeof unknown2); // Output: number
 
// const unknown3 = true; 
// console.log(typeof unknown3); // Output: boolean
// Let’s break down the first example. Since the value unknown1 is 'foo', a string, typeof unknown1 will return 'string'.

// Instructions
// 1.
// Use console.log() to print the typeof newVariable.


// Stuck? Get a hint
// 2.
// Great, now let’s check what happens if we reassign the variable. Below the console.log() statement, reassign newVariable to 1.


// Stuck? Get a hint
// 3.
// Since you assigned this new value to newVariable, it has a new type! On the line below your reassignment, use console.log() to print typeof newVariable again.

let newVariable = 'Playing around with typeof.';
console.log(typeof newVariable)

newVariable = 1;
console.log(typeof newVariable)

// Review Variables
// Nice work! This lesson introduced you to variables, a powerful concept you will use in all your future programming endeavors.

// Let’s review what we learned:

// Variables hold reusable data in a program and associate it with a name.
// Variables are stored in memory.
// The var keyword is used in pre-ES6 versions of JS.
// let is the preferred way to declare a variable when it can be reassigned, and const is the preferred way to declare a variable with a constant value.
// Variables that have not been initialized store the primitive data type undefined.
// Mathematical assignment operators make it easy to calculate a new value and assign it to the same variable.
// The + operator is used to concatenate strings including string values held in variables
// In ES6, template literals use backticks ` and ${} to interpolate values into a string.
// The typeof keyword returns the data type (as a string) of a value.
// Instructions
// To learn more about variables take on these challenges!

// Create variables and manipulate the values
// Check what happens when you try concatenating strings using variables of different data types
// Interpolate multiple variables into a string
// See what happens when you use console.log() on variables declared by different keywords (const, let, var) before they’re defined. For example:
// console.log(test1);
 
// const test1 = 'figuring out quirks';
// Find the data type of a variable’s value using the typeof keyword on a variable.
// Use typeof to find the data type of the resulting value when you concatenate variables containing two different data types.

// we want kelvin to stay constant
const kelvin = 293;
const celsius = kelvin - 273;
var fahrenheit = celsius * (9/5) + 32;
fahrenheit = Math.floor(fahrenheit);

console.log(`The temperature is ${fahrenheit} degrees Fahrenheit.`);




// Dog Years
// Dogs mature at a faster rate than human beings. We often say a dog’s age can be calculated in “dog years” to account for their growth compared to a human of the same age. In some ways we could say, time moves quickly for dogs — 8 years in a human’s life equates to 45 years in a dog’s life. How old would you be if you were a dog?

// Here’s how you convert your age from “human years” to “dog years”:

// The first two years of a dog’s life count as 10.5 dog years each.
// Each year following equates to 4 dog years.
// Before you start doing the math in your head, let a computer take care of it! With your knowledge of math operators and variables, use JavaScript to convert your human age into dog years.

// If you get stuck during this project or would like to see an experienced developer work through it, click “Get Unstuck“ to see a project walkthrough video.

// Dog years to human years

// My age
var myAge = 60;

var earlyYears = 2;
earlyYears *= 10.5;

myAge -= 2;

let laterYears = myAge - 2;

laterYears *= 4;
var myAgeInDogYears = earlyYears + laterYears;
var myName = 'Tim'.toLowerCase();


console.log(`My name is ${myName}. I am ${myAgeInDogYears} years old in dog years.`);


