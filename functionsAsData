// Functions as Data
// JavaScript functions behave like any other data type in the language; we can assign functions to variables, and we can reassign them to new variables.

// Below, we have an annoyingly long function name that hurts the readability of any code in which it’s used. Let’s pretend this function does important work and needs to be called repeatedly!

// const announceThatIAmDoingImportantWork = () => {
//     console.log("I’m doing very important work!");
// };
// What if we wanted to rename this function without sacrificing the source code? We can re-assign the function to a variable with a suitably short name:

// const busy = announceThatIAmDoingImportantWork;
 
// busy(); // This function call barely takes any space!
// busy is a variable that holds a reference to our original function. If we could look up the address in memory of busy and the address in memory of announceThatIAmDoingImportantWork they would point to the same place. Our new busy() function can be invoked with parentheses as if that was the name we originally gave our function.

// Notice how we assign announceThatIAmDoingImportantWork without parentheses as the value to the busy variable. We want to assign the value of the function itself, not the value it returns when invoked.

// In JavaScript, functions are first class objects. This means that, like other objects you’ve encountered, JavaScript functions can have properties and methods.

// Since functions are a type of object, they have properties such as .length and .name and methods such as .toString(). You can see more about the methods and properties of functions in the documentation.

// Functions are special because we can invoke them, but we can still treat them like any other type of data. Let’s get some practice doing that!

// Instructions
// 1.
// We’ve defined a function with a very long name: checkThatTwoPlusTwoEqualsFourAMillionTimes. This function takes a long time to execute. It checks whether 2 + 2 = 4, but it does it a million times (just to be really sure)! Create a shorter-named variable, is2p2 that will be easier to work with, and assign checkThatTwoPlusTwoEqualsFourAMillionTimes as its value.

// Checkpoint 2 Passed

// Stuck? Get a hint
// 2.
// Invoke your is2p2() function

// Checkpoint 3 Passed

// Stuck? Get a hint
// 3.
// Hmmm, if we forgot the original name of our function, is there a way we could figure it out? Use is2p2 to console.log() the name property of the function we assigned to is2p2. Check out the documentation if you need a hint.

const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
  for(let i = 1; i <= 1000000; i++) {
    if ( (2 + 2) != 4) {
      console.log('Something has gone very wrong :( ');
    }
  }
}

// Write your code below

const is2p2 = checkThatTwoPlusTwoEqualsFourAMillionTimes;

is2p2();
console.log(is2p2.name);


// ITERATORS
// The .forEach() Method
// The first iteration method that we’re going to learn is .forEach(). Aptly named, .forEach() will execute the same code for each element of an array.
// Diagram outlining the parts of an array iterator including the array identifier, the section that is the iterator, and the callback function

// The code above will log a nicely formatted list of the groceries to the console. Let’s explore the syntax of invoking .forEach().

// groceries.forEach() calls the forEach method on the groceries array.
// .forEach() takes an argument of callback function. Remember, a callback function is a function passed as an argument into another function.
// .forEach() loops through the array and executes the callback function for each element. During each execution, the current element is passed as an argument to the callback function.
// The return value for .forEach() will always be undefined.
// Another way to pass a callback for .forEach() is to use arrow function syntax.

// groceries.forEach(groceryItem => console.log(groceryItem));
// We can also define a function beforehand to be used as the callback function.

// function printGrocery(element){
//   console.log(element);
// }
 
// groceries.forEach(printGrocery);
// The above example uses a function declaration but you can also use a function expression or arrow function as well.

// All three code snippets do the same thing. In each array iteration method, we can use any of the three examples to supply a callback function as an argument to the iterator. It’s good to be aware of the different ways to pass in callback functions as arguments in iterators because developers have different stylistic preferences. Nonetheless, due to the strong adoption of ES6, we will be using arrow function syntax in the later exercises.

// Instructions
// 1.
// Iterate over the fruits array to log I want to eat a plus the name of each fruit to the console. For example, I want to eat a mango.

// You may use any form of callback you prefer.

const fruits = ['mango', 'papaya', 'pineapple', 'apple'];

// Iterate over fruits below

function printFruits(fruits){
  console.log('I want to eat a ' + fruits);
}

fruits.forEach(printFruits);


// ITERATORS
// The .map() Method
// The second iterator we’re going to cover is .map(). When .map() is called on an array, it takes an argument of a callback function and returns a new array! Take a look at an example of calling .map():

// const numbers = [1, 2, 3, 4, 5]; 
 
// const bigNumbers = numbers.map(number => {
//   return number * 10;
// });
// .map() works in a similar manner to .forEach()— the major difference is that .map() returns a new array.

// In the example above:

// numbers is an array of numbers.
// bigNumbers will store the return value of calling .map() on numbers.
// numbers.map will iterate through each element in the numbers array and pass the element into the callback function.
// return number * 10 is the code we wish to execute upon each element in the array. This will save each value from the numbers array, multiplied by 10, to a new array.
// If we take a look at numbers and bigNumbers:

// console.log(numbers); // Output: [1, 2, 3, 4, 5]
// console.log(bigNumbers); // Output: [10, 20, 30, 40, 50]
// Notice that the elements in numbers were not altered and bigNumbers is a new array.

// Instructions
// 1.
// Add your code under the animals array and before the line console.log(secretMessage.join(''));

// Use .map() to create a new array that contains the first character of each string in the animals array. Save the new array to a const variable named secretMessage.

// Checkpoint 2 Passed

// Stuck? Get a hint
// 2.
// Use .map() to divide all the numbers in bigNumbers by 100. Save the returned values to a variable declared with const called smallNumbers.

const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];

// Create the secretMessage array below
const secretMessage = animals.map(animal => animal[0]);

console.log(secretMessage.join(''));

const bigNumbers = [100, 200, 300, 400, 500];

// Create the smallNumbers array below
const smallNumbers = bigNumbers.map(num => num/100);

console.log(smallNumbers)


// ITERATORS
// The .filter() Method
// Another useful iterator method is .filter(). Like .map(), .filter() returns a new array. However, .filter() returns an array of elements after filtering out certain elements from the original array. The callback function for the .filter() method should return true or false depending on the element that is passed to it. The elements that cause the callback function to return true are added to the new array. Take a look at the following example:

// const words = ['chair', 'music', 'pillow', 'brick', 'pen', 'door']; 
 
// const shortWords = words.filter(word => {
//   return word.length < 6;
// });
// words is an array that contains string elements.
// const shortWords = declares a new variable that will store the returned array from invoking .filter().
// The callback function is an arrow function that has a single parameter, word. Each element in the words array will be passed to this function as an argument.
// word.length < 6; is the condition in the callback function. Any word from the words array that has fewer than 6 characters will be added to the shortWords array.
// Let’s also check the values of words and shortWords:

// console.log(words); // Output: ['chair', 'music', 'pillow', 'brick', 'pen', 'door']; 
// console.log(shortWords); // Output: ['chair', 'music', 'brick', 'pen', 'door']
// Observe how words was not mutated, i.e. changed, and shortWords is a new array.

// Instructions
// 1.
// Call the .filter() method on randomNumbers to return values that are less than 250. Save them to a new array called smallNumbers, declared with const.

// Checkpoint 2 Passed

// Stuck? Get a hint
// 2.
// Now let’s work with an array of strings. Invoke .filter() on the favoriteWords array to return elements that have more than 7 characters. Save the returned array to a const variable named longFavoriteWords.

const randomNumbers = [375, 200, 3.14, 7, 13, 852];

// Call .filter() on randomNumbers below
const smallNumbers = randomNumbers.filter(num => {
  return num < 250;
})

const favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene'];


// Call .filter() on favoriteWords below

const longFavoriteWords = favoriteWords.filter(word => {
  return word.length > 7;
})


// The .reduce() Method
// Another widely used iteration method is .reduce(). The .reduce() method returns a single value after iterating through the elements of an array, thereby reducing the array. Take a look at the example below:

// const numbers = [1, 2, 4, 10];
 
// const summedNums = numbers.reduce((accumulator, currentValue) => {
//   return accumulator + currentValue
// })
 
// console.log(summedNums) // Output: 17
// Here are the values of accumulator and currentValue as we iterate through the numbers array:

// Iteration	accumulator	currentValue	return value
// First	1	2	3
// Second	3	4	7
// Third	7	10	17

// Now let’s go over the use of .reduce() from the example above:

// numbers is an array that contains numbers.
// summedNums is a variable that stores the returned value of invoking .reduce() on numbers.
// numbers.reduce() calls the .reduce() method on the numbers array and takes in a callback function as argument.
// The callback function has two parameters, accumulator and currentValue. The value of accumulator starts off as the value of the first element in the array and the currentValue starts as the second element. To see the value of accumulator and currentValue change, review the chart above.
// As .reduce() iterates through the array, the return value of the callback function becomes the accumulator value for the next iteration, currentValue takes on the value of the current element in the looping process.
// The .reduce() method can also take an optional second parameter to set an initial value for accumulator (remember, the first argument is the callback function!). For instance:

// const numbers = [1, 2, 4, 10];
 
// const summedNums = numbers.reduce((accumulator, currentValue) => {
//   return accumulator + currentValue
// }, 100)  // <- Second argument for .reduce()
 
// console.log(summedNums); // Output: 117
// Here’s an updated chart that accounts for the second argument of 100:

// Iteration #	accumulator	currentValue	return value
// First	100	1	101
// Second	101	2	103
// Third	103	4	107
// Fourth	107	10	117

// Instructions
// 1.
// Let’s practice calling .reduce() and using console.log() to check the values as .reduce() iterates through the array.

// In main.js, there is an array of numbers, newNumbers.

// To start, declare a new variable named newSum using the const keyword. Assign to newSum the value of calling .reduce() on newNumbers. You don’t need to provide any arguments to .reduce() yet.

// You’ll also see a TypeError: undefined is not a function but we’ll fix that after we add our callback function in the next step!

// Checkpoint 2 Passed

// Stuck? Get a hint
// 2.
// Provide .reduce with an argument of a callback function. The callback function has two parameters. The first parameter is accumulator and the second parameter is currentValue. Use either a function expression or an arrow function.

// Checkpoint 3 Passed

// Stuck? Get a hint
// 3.
// To check the value being used as we iterate through the array, add three statements to the function body of the callback:

// console.log('The value of accumulator: ', accumulator);
// console.log('The value of currentValue: ', currentValue);
// a return statement that adds accumulator to currentValue.
// Checkpoint 4 Passed

// Stuck? Get a hint
// 4.
// Log the value of newSum to the console to see the return value of calling .reduce() on newNumbers.

// Checkpoint 5 Passed
// 5.
// While we have this code set up, let’s also check what happens if you add a second argument to .reduce(). The second argument acts as an initial value for the accumulator.

// Add a second argument of 10 to .reduce().

const newNumbers = [1, 3, 5, 7];

const newSum = newNumbers.reduce((accumulator, currentValue) => {
  console.log('The value of accumulator: ', accumulator);
  console.log('The value of currentValue: ', currentValue);
  return accumulator + currentValue;
}, 10);

console.log(newSum);


// ITERATORS
// Iterator Documentation
// There are many additional built-in array methods, a complete list of which is on the MDN’s Array iteration methods page.

// The documentation for each method contains several sections:

// A short definition.
// A block with the correct syntax for using the method.
// A list of parameters the method accepts or requires.
// The return value of the function.
// An extended description.
// Examples of the method’s use.
// Other additional information.
// In the instructions below, there are some errors in the code. Use the documentation for a given method to determine the error or fill in a blank to make the code run correctly.

// Instructions
// 1.
// In the code editor, there is an array called words. We want to create a new array of interesting words. The first thing we want to do is check if there are words that are fewer than 6 characters long. There is something missing in the words.some() method call. Fix this method so that true is printed to the console.

// For more information browse MDN’s documentation on .some() .

// Checkpoint 2 Passed

// Stuck? Get a hint
// 2.
// The .some() method returned true, which means there are some words in the array that are shorter than six characters. Use the .filter() method to save any words longer than 5 characters to a new variable called interestingWords, declared with const.

// We’ve used .filter() in a previous exercise, but, for more information browse MDN’s documentation on .filter() .

// Checkpoint 3 Passed
// 3.
// In the last line of main.js, there is this code:

// // console.log(interestingWords.every(word =>        ));
// Complete the code between the parentheses to check if every element has more than 5 characters.

// Make sure to uncomment (delete the // before) the last line of the program before you run the code.

// For more information browse MDN’s documentation on .every() .


const words = ['unique', 'uncanny', 'pique', 'oxymoron', 'guise'];

// Something is missing in the method call below

console.log(words.some(word => {
  return word.length < 6;
}));

// Use filter to create a new array
const interestingWords = words.filter((word) => {return word.length > 5});


// Make sure to uncomment the code below and fix the incorrect code before running it

console.log(interestingWords.every((word) => {return word.length > 5}));









