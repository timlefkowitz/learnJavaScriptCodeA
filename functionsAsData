// Functions as Data
// JavaScript functions behave like any other data type in the language; we can assign functions to variables, and we can reassign them to new variables.

// Below, we have an annoyingly long function name that hurts the readability of any code in which it’s used. Let’s pretend this function does important work and needs to be called repeatedly!

// const announceThatIAmDoingImportantWork = () => {
//     console.log("I’m doing very important work!");
// };
// What if we wanted to rename this function without sacrificing the source code? We can re-assign the function to a variable with a suitably short name:

// const busy = announceThatIAmDoingImportantWork;
 
// busy(); // This function call barely takes any space!
// busy is a variable that holds a reference to our original function. If we could look up the address in memory of busy and the address in memory of announceThatIAmDoingImportantWork they would point to the same place. Our new busy() function can be invoked with parentheses as if that was the name we originally gave our function.

// Notice how we assign announceThatIAmDoingImportantWork without parentheses as the value to the busy variable. We want to assign the value of the function itself, not the value it returns when invoked.

// In JavaScript, functions are first class objects. This means that, like other objects you’ve encountered, JavaScript functions can have properties and methods.

// Since functions are a type of object, they have properties such as .length and .name and methods such as .toString(). You can see more about the methods and properties of functions in the documentation.

// Functions are special because we can invoke them, but we can still treat them like any other type of data. Let’s get some practice doing that!

// Instructions
// 1.
// We’ve defined a function with a very long name: checkThatTwoPlusTwoEqualsFourAMillionTimes. This function takes a long time to execute. It checks whether 2 + 2 = 4, but it does it a million times (just to be really sure)! Create a shorter-named variable, is2p2 that will be easier to work with, and assign checkThatTwoPlusTwoEqualsFourAMillionTimes as its value.

// Checkpoint 2 Passed

// Stuck? Get a hint
// 2.
// Invoke your is2p2() function

// Checkpoint 3 Passed

// Stuck? Get a hint
// 3.
// Hmmm, if we forgot the original name of our function, is there a way we could figure it out? Use is2p2 to console.log() the name property of the function we assigned to is2p2. Check out the documentation if you need a hint.

const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {
  for(let i = 1; i <= 1000000; i++) {
    if ( (2 + 2) != 4) {
      console.log('Something has gone very wrong :( ');
    }
  }
}

// Write your code below

const is2p2 = checkThatTwoPlusTwoEqualsFourAMillionTimes;

is2p2();
console.log(is2p2.name);


// ITERATORS
// The .forEach() Method
// The first iteration method that we’re going to learn is .forEach(). Aptly named, .forEach() will execute the same code for each element of an array.
// Diagram outlining the parts of an array iterator including the array identifier, the section that is the iterator, and the callback function

// The code above will log a nicely formatted list of the groceries to the console. Let’s explore the syntax of invoking .forEach().

// groceries.forEach() calls the forEach method on the groceries array.
// .forEach() takes an argument of callback function. Remember, a callback function is a function passed as an argument into another function.
// .forEach() loops through the array and executes the callback function for each element. During each execution, the current element is passed as an argument to the callback function.
// The return value for .forEach() will always be undefined.
// Another way to pass a callback for .forEach() is to use arrow function syntax.

// groceries.forEach(groceryItem => console.log(groceryItem));
// We can also define a function beforehand to be used as the callback function.

// function printGrocery(element){
//   console.log(element);
// }
 
// groceries.forEach(printGrocery);
// The above example uses a function declaration but you can also use a function expression or arrow function as well.

// All three code snippets do the same thing. In each array iteration method, we can use any of the three examples to supply a callback function as an argument to the iterator. It’s good to be aware of the different ways to pass in callback functions as arguments in iterators because developers have different stylistic preferences. Nonetheless, due to the strong adoption of ES6, we will be using arrow function syntax in the later exercises.

// Instructions
// 1.
// Iterate over the fruits array to log I want to eat a plus the name of each fruit to the console. For example, I want to eat a mango.

// You may use any form of callback you prefer.

const fruits = ['mango', 'papaya', 'pineapple', 'apple'];

// Iterate over fruits below

function printFruits(fruits){
  console.log('I want to eat a ' + fruits);
}

fruits.forEach(printFruits);


// ITERATORS
// The .map() Method
// The second iterator we’re going to cover is .map(). When .map() is called on an array, it takes an argument of a callback function and returns a new array! Take a look at an example of calling .map():

// const numbers = [1, 2, 3, 4, 5]; 
 
// const bigNumbers = numbers.map(number => {
//   return number * 10;
// });
// .map() works in a similar manner to .forEach()— the major difference is that .map() returns a new array.

// In the example above:

// numbers is an array of numbers.
// bigNumbers will store the return value of calling .map() on numbers.
// numbers.map will iterate through each element in the numbers array and pass the element into the callback function.
// return number * 10 is the code we wish to execute upon each element in the array. This will save each value from the numbers array, multiplied by 10, to a new array.
// If we take a look at numbers and bigNumbers:

// console.log(numbers); // Output: [1, 2, 3, 4, 5]
// console.log(bigNumbers); // Output: [10, 20, 30, 40, 50]
// Notice that the elements in numbers were not altered and bigNumbers is a new array.

// Instructions
// 1.
// Add your code under the animals array and before the line console.log(secretMessage.join(''));

// Use .map() to create a new array that contains the first character of each string in the animals array. Save the new array to a const variable named secretMessage.

// Checkpoint 2 Passed

// Stuck? Get a hint
// 2.
// Use .map() to divide all the numbers in bigNumbers by 100. Save the returned values to a variable declared with const called smallNumbers.

const animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];

// Create the secretMessage array below
const secretMessage = animals.map(animal => animal[0]);

console.log(secretMessage.join(''));

const bigNumbers = [100, 200, 300, 400, 500];

// Create the smallNumbers array below
const smallNumbers = bigNumbers.map(num => num/100);

console.log(smallNumbers)


