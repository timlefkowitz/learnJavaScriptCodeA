/*
FUNCTIONS

Function Declarations
In JavaScript, there are many ways to create a function. One way to create a function is by using a function declaration. Just like how a variable declaration binds a value to a variable name, a function declaration binds a function to a name, or an identifier. Take a look at the anatomy of a function declaration below:

Diagram showing the syntax of a function declaration
A function declaration consists of:

The function keyword.
The name of the function, or its identifier, followed by parentheses.
A function body, or the block of statements required to perform a specific task, enclosed in the function’s curly brackets, { }.
A function declaration is a function that is bound to an identifier, or name. In the next exercise we’ll go over how to run the code inside the function body.

We should also be aware of the hoisting feature in JavaScript which allows access to function declarations before they’re defined.

Take a look at example of hoisting:

greetWorld(); // Output: Hello, World!
 
function greetWorld() {
  console.log('Hello, World!');
}
Notice how hoisting allowed greetWorld() to be called before the greetWorld() function was defined! Since hoisting isn’t considered good practice, we simply want you to be aware of this feature.

If you want to read more about hoisting, check out MDN documentation on hoisting.

Instructions
1.
Let’s create a function that prints a reminder to the console. Using a function declaration, create a function called getReminder().

Checkpoint 2 Passed

Hint
Syntax for a function declaration:

function functionName() {}
2.
In the function body of getReminder(), log the following reminder to the console: 'Water the plants.'

Checkpoint 3 Passed

Stuck? Get a hint
3.
Let’s create another function that prints a useful Spanish travel phrase to the console.

Using a function declaration, create a function called greetInSpanish().

Checkpoint 4 Passed

Hint
Syntax for a function declaration:

function functionName() {}
4.
Add code to the function body of greetInSpanish():

In the function body console.log() the following Spanish phrase to the console: 'Buenas Tardes.'

*/

function getReminder(){
  console.log('Water the plants.')
}

function greetInSpanish(){
  console.log('Buenas Tardes.');
}

function sayThanks(){
  console.log('Thank you for your purchase! We appreciate your business.')
}

sayThanks();
sayThanks();
sayThanks();



FUNCTIONS
// Parameters and Arguments
// So far, the functions we’ve created execute a task without an input. However, some functions can take inputs and use the inputs to perform a task. When declaring a function, we can specify its parameters. Parameters allow functions to accept input(s) and perform a task using the input(s). We use parameters as placeholders for information that will be passed to the function when it is called.

// Let’s observe how to specify parameters in our function declaration:

// JavaScript syntax for declaring a function with parameters
// In the diagram above, calculateArea(), computes the area of a rectangle, based on two inputs, width and height. The parameters are specified between the parenthesis as width and height, and inside the function body, they act just like regular variables. width and height act as placeholders for values that will be multiplied together.

// When calling a function that has parameters, we specify the values in the parentheses that follow the function name. The values that are passed to the function when it is called are called arguments. Arguments can be passed to the function as values or variables.

// JavaScript syntax for invoking a function with arguments as values
// In the function call above, the number 10 is passed as the width and 6 is passed as height. Notice that the order in which arguments are passed and assigned follows the order that the parameters are declared.

// JavaScript syntax for invoking a function with arguments as variables
// The variables rectWidth and rectHeight are initialized with the values for the height and width of a rectangle before being used in the function call.

// By using parameters, calculateArea() can be reused to compute the area of any rectangle! Functions are a powerful tool in computer programming so let’s practice creating and calling functions with parameters.

// Instructions
// 1.
// The sayThanks() function works well, but let’s add the customer’s name in the message.

// Add a parameter called name to the function declaration for sayThanks().


// Stuck? Get a hint
// 2.
// With name as a parameter, it can be used as a variable in the function body of sayThanks().

// Using name and string concatenation, change the thank you message into the following:

// 'Thank you for your purchase '+ name + '! We appreciate your business.'
// Copy and paste the above message into your code.


// Stuck? Get a hint
// 3.
// A customer named Cole just purchased something from your online store. Call sayThanks() and pass 'Cole' as an argument to send Cole a personalized thank you message.

function sayThanks(name) {
  console.log('Thank you for your purchase '+ name + '! We appreciate your business.');
}

sayThanks('Cole')


FUNCTIONS
// Default Parameters
// One of the features added in ES6 is the ability to use default parameters. Default parameters allow parameters to have a predetermined value in case there is no argument passed into the function or if the argument is undefined when called.

// Take a look at the code snippet below that uses a default parameter:

// function greeting (name = 'stranger') {
//   console.log(`Hello, ${name}!`)
// }
 
// greeting('Nick') // Output: Hello, Nick!
// greeting() // Output: Hello, stranger!
 
// In the example above, we used the = operator to assign the parameter name a default value of 'stranger'. This is useful to have in case we ever want to include a non-personalized default greeting!

// When the code calls greeting('Nick') the value of the argument is passed in and, 'Nick', will override the default parameter of 'stranger' to log 'Hello, Nick!' to the console.

// When there isn’t an argument passed into greeting(), the default value of 'stranger' is used, and 'Hello, stranger!' is logged to the console.

// By using a default parameter, we account for situations when an argument isn’t passed into a function that is expecting an argument.

// Let’s practice creating functions that use default parameters.

// Instructions
// 1.
// The function makeShoppingList() creates a shopping list based on the items that are passed to the function as arguments.

// Imagine that you always purchase milk, bread, and eggs every time you go shopping for groceries. To make creating a grocery list easier, let’s assign default values to the parameters in makeShoppingList().

// Change the parameters of makeShoppingList() into default parameters :

// Assign ‘milk’ as the default value of item1.
// Assign ‘bread’ as the default value of item2.
// Assign ‘eggs’ as the default value of item3.

function makeShoppingList(item1 = 'milk', item2 = 'bread', item3 = 'eggs'){
  console.log(`Remember to buy ${item1}`);
  console.log(`Remember to buy ${item2}`);
  console.log(`Remember to buy ${item3}`);
}




FUNCTIONS
// Return
// When a function is called, the computer will run through the function’s code and evaluate the result of calling the function. By default that resulting value is undefined.

// function rectangleArea(width, height) {
//   let area = width * height;
// }
// console.log(rectangleArea(5, 7)) // Prints undefined
// In the code example, we defined our function to calculate the area of a width and height parameter. Then rectangleArea() is invoked with the arguments 5 and 7. But when we went to print the results we got undefined. Did we write our function wrong? No! In fact, the function worked fine, and the computer did calculate the area as 35, but we didn’t capture it. So how can we do that? With the keyword return!

// using return keyword in a function
// To pass back information from the function call, we use a return statement. To create a return statement, we use the return keyword followed by the value that we wish to return. Like we saw above, if the value is omitted, undefined is returned instead.

// When a return statement is used in a function body, the execution of the function is stopped and the code that follows it will not be executed. Look at the example below:

// function rectangleArea(width, height) {
//   if (width < 0 || height < 0) {
//     return 'You need positive integers to calculate area!';
//   }
//   return width * height;
// }
// If an argument for width or height is less than 0, then rectangleArea() will return 'You need positive integers to calculate area!'. The second return statement width * height will not run.

// The return keyword is powerful because it allows functions to produce an output. We can then save the output to a variable for later use.

// Instructions
// 1.
// Imagine if we needed to order monitors for everyone in an office and this office is conveniently arranged in a grid shape. We could use a function to help us calculate the number of monitors needed!

// Declare a function monitorCount() that has two parameters. The first parameter is rows and the second parameter is columns.


// Stuck? Get a hint
// 2.
// Let’s compute the number of monitors by multiplying rows and columns and then returning the value.

// In the function body of the function you just wrote, use the return keyword to return rows * columns.


// Stuck? Get a hint
// 3.
// Now that the function is defined, we can compute the number of monitors needed. Let’s say that the office has 5 rows and 4 columns.

// Declare a variable named numOfMonitors using the const keyword and assign numOfMonitors the value of invoking monitorCount() with the arguments 5 and 4.


// Stuck? Get a hint
// 4.
// To check that the function worked properly, log numOfMonitors to the console.



// 
const numOfMonitors = monitorCount(5,4);
function monitorCount(rows, columns){
  return rows * columns;
}

console.log(numOfMonitors);


function monitorCount(rows, columns) {
  return rows * columns;
}
const totalCost = costOfMonitors(5,4);

function costOfMonitors(rows, columns){
  return monitorCount(rows, columns) * 200;
}

console.log(totalCost);



Function Expressions
// Another way to define a function is to use a function expression. To define a function inside an expression, we can use the function keyword. In a function expression, the function name is usually omitted. A function with no name is called an anonymous function. A function expression is often stored in a variable in order to refer to it.

// Consider the following function expression:

// defining a function expression
// To declare a function expression:

// Declare a variable to make the variable’s name be the name, or identifier, of your function. Since the release of ES6, it is common practice to use const as the keyword to declare the variable.

// Assign as that variable’s value an anonymous function created by using the function keyword followed by a set of parentheses with possible parameters. Then a set of curly braces that contain the function body.

// To invoke a function expression, write the name of the variable in which the function is stored followed by parentheses enclosing any arguments being passed into the function.

// variableName(argument1, argument2)
// Unlike function declarations, function expressions are not hoisted so they cannot be called before they are defined.

// Let’s define a new function using a function expression.

// Instructions
// 1.
// Let’s say we have a plant that we need to water once a week on Wednesdays. We could define a function expression to help us check the day of the week and the plant needs to be watered:

// Create a variable named plantNeedsWater using the const variable keyword.
// Assign an anonymous function that takes in a parameter of day to plantNeedsWater.

// Stuck? Get a hint
// 2.
// Now we need to add some code to the function body of plantNeedsWater():

// In the function body add an if conditional that checks day === 'Wednesday'.
// If the conditional is truthy, inside the if code block, use the return keyword to return true.

// Stuck? Get a hint
// 3.
// On days that aren’t 'Wednesday', plantNeedsWater() should return false:

// Add an else statement after the if statement.
// Inside the else statement use the return keyword to return false.

// Stuck? Get a hint
// 4.
// Call the plantNeedsWater() and pass in 'Tuesday' as an argument.


// Stuck? Get a hint
// 5.
// Let’s check that plantNeedsWater() returned the expected value.

// Log plantNeedsWater('Tuesday') to the console. If it worked correctly, you should see false logged to the console.

// 

const plantNeedsWater = function (day){
  if(day === 'Wednesday'){
    return true;
  } else {
    return false;
  }
}


console.log(plantNeedsWater('Tuesday'));

FUNCTIONS
// Arrow Functions
// ES6 introduced arrow function syntax, a shorter way to write functions by using the special “fat arrow” () => notation.

// Arrow functions remove the need to type out the keyword function every time you need to create a function. Instead, you first include the parameters inside the ( ) and then add an arrow => that points to the function body surrounded in { } like this:

// const rectangleArea = (width, height) => {
//   let area = width * height;
//   return area;
// };
// It’s important to be familiar with the multiple ways of writing functions because you will come across each of these when reading other JavaScript code.

// Instructions
// 1.
// Change plantNeedsWater() to use arrow function syntax.


// 

const plantNeedsWater = (day) => {
  if (day === 'Wednesday') {
    return true;
  } else {
    return false;
  }
};


Concise Body Arrow Functions
// JavaScript also provides several ways to refactor arrow function syntax. The most condensed form of the function is known as concise body. We’ll explore a few of these techniques below:

// Functions that take only a single parameter do not need that parameter to be enclosed in parentheses. However, if a function takes zero or multiple parameters, parentheses are required.

// showcasing how arrow functions parameters differ for different amounts of parameters
// A function body composed of a single-line block does not need curly braces. Without the curly braces, whatever that line evaluates will be automatically returned. The contents of the block should immediately follow the arrow => and the return keyword can be removed. This is referred to as implicit return.

// comparing single line and multiline arrow functions
// So if we have a function:

// const squareNum = (num) => {
//   return num * num;
// };
// We can refactor the function to:

// const squareNum = num => num * num;
// Notice the following changes:

// The parentheses around num have been removed, since it has a single parameter.
// The curly braces { } have been removed since the function consists of a single-line block.
// The return keyword has been removed since the function consists of a single-line block.
// Instructions
// 1.
// Let’s refactor plantNeedsWater() to be a concise body. Notice that we’ve already converted the if/else statement to a ternary operator to make the code fit on one line.

const plantNeedsWater = day => day === 'Wednesday' ? true : false;



SCOPE
// Blocks and Scope
// Before we talk more about scope, we first need to talk about blocks.

// We’ve seen blocks used before in functions and if statements. A block is the code found inside a set of curly braces {}. Blocks help us group one or more statements together and serve as an important structural marker for our code.

// A block of code could be a function, like this:

// const logSkyColor = () => {
//   let color = 'blue'; 
//   console.log(color); // blue 
// }
// Notice that the function body is actually a block of code.

// Observe the block in an if statement:

// if (dusk) {
//   let color = 'pink';
//   console.log(color); // pink
// }
// In the next few exercises, we’ll see how blocks define the scope of variables.

// Instructions
// 1.
// At the top of main.js, declare a const variable, named city set equal to 'New York City'. This variable will exist outside of the block.

// 2.
// Below the city variable, write a function named logCitySkyline.


// Stuck? Get a hint
// 3.
// Inside of the function body of logCitySkyline(), write another variable using let named skyscraper and set it equal to 'Empire State Building'.


// Stuck? Get a hint
// 4.
// Inside the function, include a return statement like this:

// return 'The stars over the ' + skyscraper + ' in ' + city;

// Stuck? Get a hint
// 5.
// Beneath the logCitySkyline() function, use console.log() to log the value of logCitySkyline() to the console.

// You’ll notice that the logCitySkyline() function is able to access both variables without any problems. In the next exercise we’ll consider why would it be preferable to have one variable outside of a block and the other inside of a block.

const city = 'New York City';

function logCitySkyline(){
  let skyscraper = 'Empire State Building';
  return 'The stars over the ' + skyscraper + ' in ' + city;
}

console.log(logCitySkyline())


SCOPE
// Global Scope
// Scope is the context in which our variables are declared. We think about scope in relation to blocks because variables can exist either outside of or within these blocks.

// In global scope, variables are declared outside of blocks. These variables are called global variables. Because global variables are not bound inside a block, they can be accessed by any code in the program, including code in blocks.

// Let’s take a look at an example of global scope:

// const color = 'blue';
 
// const returnSkyColor = () => {
//   return color; // blue 
// };
 
// console.log(returnSkyColor()); // blue
// Even though the color variable is defined outside of the block, it can be accessed in the function block, giving it global scope.
// In turn, color can be accessed within the returnSkyColor function block.
// Let’s work with global variables to see how data can be accessible from any place within a program.

// Instructions
// 1.
// At the top of main.js, write three global variables:

// Name the first variable satellite and set it equal to 'The Moon'.
// Name the second variable galaxy and set it equal to 'The Milky Way'.
// Name the third variable stars and set it equal to 'North Star'.

// Stuck? Get a hint
// 2.
// Below the variables created in the previous step, write a function named callMyNightSky. Inside the function, include a return statement like this:

// return 'Night Sky: ' + satellite + ', ' + stars + ', and ' + galaxy;

// Stuck? Get a hint
// 3.
// Beneath the callMyNightSky() function, use console.log() to log the value of callMyNightSky() to the console.

// You’ll notice that the function block for callMyNightSky() is able to access the global variables freely since the variables are available to all lines of code in the file.

//
const satellite = 'The Moon';
const galaxy = 'The Milky Way';
const stars = 'North Star';

function callMyNightSky(){
  return 'Night Sky: ' + satellite + ', ' + stars + ', and ' + galaxy;
}

console.log(callMyNightSky())


SCOPE
// Block Scope
// The next context we’ll cover is block scope. When a variable is defined inside a block, it is only accessible to the code within the curly braces {}. We say that variable has block scope because it is only accessible to the lines of code within that block.

// Variables that are declared with block scope are known as local variables because they are only available to the code that is part of the same block.

// Block scope works like this:

// const logSkyColor = () => {
//   let color = 'blue'; 
//   console.log(color); // blue 
// };
 
// logSkyColor(); // blue 
// console.log(color); // ReferenceError
// You’ll notice:

// We define a function logSkyColor().
// Within the function, the color variable is only available within the curly braces of the function.
// If we try to log the same variable outside the function, it throws a ReferenceError.
// Instructions
// 1.
// In main.js, define a function logVisibleLightWaves().


// Stuck? Get a hint
// 2.
// Within the logVisibleLightWaves() function, using const, create a variable lightWaves and set it equal to 'Moonlight'.

// 3.
// Within the logVisibleLightWaves() function, beneath the lightWaves variable, add a console.log() statement that will log the value of the lightWaves variable when the function runs.


// Stuck? Get a hint
// 4.
// Call the logVisibleLightWaves() function from outside the function.


// Stuck? Get a hint
// 5.
// Beneath the function call, log the value of lightWaves to the console from outside the function.

// You’ll notice that it logs a ReferenceError since the variable is tied to the block scope of the function!


// 
function logVisibleLightWaves(){
  const lightWaves = 'Moonlight';
  console.log(lightWaves)
}

logVisibleLightWaves() 
lightWaves()



// SCOPE
// Scope Pollution
// It may seem like a great idea to always make your variables accessible, but having too many global variables can cause problems in a program.

// When you declare global variables, they go to the global namespace. The global namespace allows the variables to be accessible from anywhere in the program. These variables remain there until the program finishes which means our global namespace can fill up really quickly.

// Scope pollution is when we have too many global variables that exist in the global namespace, or when we reuse variables across different scopes. Scope pollution makes it difficult to keep track of our different variables and sets us up for potential accidents. For example, globally scoped variables can collide with other variables that are more locally scoped, causing unexpected behavior in our code.

// Let’s look at an example of scope pollution in practice so we know how to avoid it:

// let num = 50;
 
// const logNum = () => {
//   num = 100; // Take note of this line of code
//   console.log(num);
// };
 
// logNum(); // Prints 100
// console.log(num); // Prints 100
// You’ll notice:

// We have a variable num.
// Inside the function body of logNum(), we want to declare a new variable but forgot to use the let keyword.
// When we call logNum(), num gets reassigned to 100.
// The reassignment inside logNum() affects the global variable num.
// Even though the reassignment is allowed and we won’t get an error, if we decided to use num later, we’ll unknowingly use the new value of num.
// While it’s important to know what global scope is, it’s best practice to not define variables in the global scope.

// Instructions
// 1.
// Let’s see what happens if we create a variable that overwrites a global variable.

// Inside the callMyNightSky() function, on the very first line of the function body, assign the variable stars to 'Sirius' as such:

// stars = 'Sirius';
// 2.
// Outside the function, under the current console.log() statement, add another console.log() statement to log stars to the console.

// You’ll notice that the global variable stars was reassigned to 'Sirius'. In other words, we changed the value of the global stars variable but it’s not easy to read what exactly happened. This is bad practice in code maintainability and could impact our program in ways we do not intend.


const satellite = 'The Moon';
const galaxy = 'The Milky Way';
let stars = 'North Star';

const callMyNightSky = () => {
  stars = 'Sirius';
	return 'Night Sky: ' + satellite + ', ' + stars + ', ' + galaxy;
};

console.log(callMyNightSky());
console.log(stars)


SCOPE
// Practice Good Scoping
// Given the challenges with global variables and scope pollution, we should follow best practices for scoping our variables as tightly as possible using block scope.

// Tightly scoping your variables will greatly improve your code in several ways:

// It will make your code more legible since the blocks will organize your code into discrete sections.
// It makes your code more understandable since it clarifies which variables are associated with different parts of the program rather than having to keep track of them line after line!
// It’s easier to maintain your code, since your code will be modular.
// It will save memory in your code because it will cease to exist after the block finishes running.
// Here’s another example of how to use block scope, as defined within an if block:

// const logSkyColor = () => {
//   const dusk = true;
//   let color = 'blue'; 
//   if (dusk) {
//     let color = 'pink';
//     console.log(color); // pink
//   }
//   console.log(color); // blue 
// };
 
// console.log(color); // ReferenceError
// Here, you’ll notice:

// We create a variable dusk inside the logSkyColor() function.
// After the if statement, we define a new code block with the {} braces. Here we assign a new value to the variable color if the if statement is truthy.
// Within the if block, the color variable holds the value 'pink', though outside the if block, in the function body, the color variable holds the value 'blue'.
// While we use block scope, we still pollute our namespace by reusing the same variable name twice. A better practice would be to rename the variable inside the block.
// Block scope is a powerful tool in JavaScript, since it allows us to define variables with precision, and not pollute the global namespace. If a variable does not need to exist outside a block— it shouldn’t!

// Instructions
// 1.
// Inside the function body of logVisibleLightWaves(), beneath the region variable and before the provided console.log() statement, create an if statement that checks if the region is the 'The Arctic'.


// Stuck? Get a hint
// 2.
// Inside the if block, define a new let variable lightWaves and set it equal to 'Northern Lights'.

// 3.
// Beneath the variable in the if block, use console.log() to log the value of the block variable inside the if block.

// Run your code and notice the output. Inside the if block console.log(lightWaves) logs the value Northern Lights to the console. Outside the if block, but still within the function, the same statement logs Moonlight to the console.



const logVisibleLightWaves = () => {
  let lightWaves = 'Moonlight';
	let region = 'The Arctic';
  // Add if statement here:
  if(region === 'The Arctic'){
    let lightWaves = 'Northern Lights';
    console.log(lightWaves)

  }
 
  console.log(lightWaves);
};

logVisibleLightWaves();