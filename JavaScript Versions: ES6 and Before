/*

JavaScript Versions: ES6 and Before
Ever heard of the term “ES6” and wondered what it’s about? Click on this article to read and find out!

You might have seen the term “ES6” or “Javascript ES6” and wondered what it actually means. Well wonder no further, because we’re going to dive into what ES6 is and how it relates to Javascript!

First, let’s bring in some history. JavaScript was introduced in 1995 by the company Netscape Communications as a scripting language for web designers and programmers to interact with web pages. The next year, Netscape submitted JavaScript to a standards developing organization called Ecma International to create standards for a scripting language (a type of programming language). In 1997, Ecma International released ECMA-262 which sets standards for the first version of a scripting language called ECMAScript, shortened to ES.

These new ECMAScript standards provided rules for the architecture of JavaScript features. As new programming paradigms emerged and developers sought new features, newer versions of ECMAScript provided a basis for a consistency between new and old JavaScript versions.

To fully distinguish the difference between JavaScript and ECMAScript: if you want to create an app or program you can use JavaScript — if you want to create a new scripting language you can follow the guidelines in ECMAScript. So, when you see ES6 or JavaScript ES6, it means that that version of JavaScript is following the specifications in the sixth edition of ECMAScript! You might also see ES2015 instead of ES6, but both terminologies are referring to the same 6th edition of ECMAScript that was released in 2015. Take a look at the timeline below to see how JavaScript has evolved over the years:

Timeline showing the evolution of JS editions from inception to 2018
Now, you may be asking, what makes an update in 2015 still relevant today when there are more recent updates like ES7 and ES8?

Well, despite the release of newer versions, ES6 is actually the biggest update made to ECMAScript since the first edition released in 1997! Some developers even refer to ES6 as “Modern JavaScript” because of all the major additions. There were so many great features added to help JavaScript developers that include:

new keywords like let and const to declare variables,
new function syntax using Arrow functions,
creation of Classes,
parameters with default values,
promises for asynchronous actions,
and many more!
Up-to-date browsers now support most of the ES6 features which allow developers to take advantage of these new additions. ES6 ultimately allows programmers to save time and write more concise code. Take for example pre-ES6 syntax for function expressions:

var greeting = function() {
  console.log('Hello World!');  
};
With ES6 arrow functions, we can transform the expression above into:

const greeting = () => console.log('Hello World'); 
However, arrow functions are not just simply syntactical re-writes. As with other ES6 features, there are other underlying benefits and tradeoffs to consider. Nonetheless, there has been a strong adoption of ES6 in the development community. Benefits such as new ES6 syntax, makes it easier to utilize a popular programming paradigm, Object Oriented Programming (OOP). This change allowed for developers of other languages who are used to OOP can now transition into learning and using JavaScript. Another reason for the popularity of ES6 is correlated with the usage of ES6 in popular frameworks like React. So, if you want to learn the newest tools and frameworks, you will have to pick up ES6 along the way.

This being said, we shouldn’t disregard legacy code, i.e. older versions of JavaScript. In fact, there are still many projects that are built and maintained with legacy code! If you want the ability and freedom to work on any sort of JavaScript project, you should familiarize yourself with pre-ES6 and ES6 JavaScript syntax. But don’t worry, we cover both pre-ES6 and ES6 in our JavaScript course. Check it out to become a rockstar at JavaScript basics and learn fundamental programming skills!

*/



/*

CONDITIONAL STATEMENTS
What are Conditional Statements?
In life, we make decisions based on circumstances. Think of an everyday decision as mundane as falling asleep — if we are tired, we go to bed, otherwise, we wake up and start our day.

These if-else decisions can be modeled in code by creating conditional statements. A conditional statement checks a specific condition(s) and performs a task based on the condition(s).

In this lesson, we will explore how programs make decisions by evaluating conditions and introduce logic into our code!

We’ll be covering the following concepts:

if, else if, and else statements
comparison operators
logical operators
truthy vs falsy values
ternary operators
switch statement
So if you’re ready to learn these concepts go to the next lesson— else, read over the concepts, observe the diagram, and prepare yourself for this lesson!

*/


If Statement
// We often perform a task based on a condition. For example, if the weather is nice today, then we will go outside. If the alarm clock rings, then we’ll shut it off. If we’re tired, then we’ll go to sleep.

// In programming, we can also perform a task based on a condition using an if statement:

// if (true) {
//   console.log('This message will print!'); 
// }
// // Prints: This message will print!
// Notice in the example above, we have an if statement. The if statement is composed of:

// The if keyword followed by a set of parentheses () which is followed by a code block, or block statement, indicated by a set of curly braces {}.
// Inside the parentheses (), a condition is provided that evaluates to true or false.
// If the condition evaluates to true, the code inside the curly braces {} runs, or executes.
// If the condition evaluates to false, the block won’t execute.
// Let’s make an if statement.

// Instructions
// 1.
// Using the let keyword, declare a variable named sale. Assign the value true to it.


// Stuck? Get a hint
// 2.
// Now create an if statement. Provide the if statement a condition of sale.

// Inside the code block of the if statement, console.log() the string 'Time to buy!'.


// Stuck? Get a hint
// 3.
// Notice that the code inside the if statement ran, since 'Time to buy!' was logged to the console.

// Below the sale variable declaration, but before the if statement, reassign sale to false. Run your code and observe what happens, we’ll be changing this behavior in the next exercise.

// 

let sale = false;


if(sale){
  console.log('Time to buy!');
}



CONDITIONAL STATEMENTS
// If...Else Statements
// In the previous exercise, we used an if statement that checked a condition to decide whether or not to run a block of code. In many cases, we’ll have code we want to run if our condition evaluates to false.

// If we wanted to add some default behavior to the if statement, we can add an else statement to run a block of code when the condition evaluates to false. Take a look at the inclusion of an else statement:

// if (false) {
//   console.log('The code in this block will not run.');
// } else {
//   console.log('But the code in this block will!');
// }
 
// // Prints: But the code in this block will!
// An else statement must be paired with an if statement, and together they are referred to as an if...else statement.

// In the example above, the else statement:

// Uses the else keyword following the code block of an if statement.
// Has a code block that is wrapped by a set of curly braces {}.
// The code inside the else statement code block will execute when the if statement’s condition evaluates to false.
// if...else statements allow us to automate solutions to yes-or-no questions, also known as binary decisions.

// Instructions
// 1.
// Add an else statement to the existing if statement. Inside the code block of the else statement, console.log() the string 'Time to wait for a sale.'

let sale = true;

sale = false;

if(sale) {
  console.log('Time to buy!');
} else {
  console.log('Time to wait for a sale.');
}



CONDITIONAL STATEMENTS
// Comparison Operators
// When writing conditional statements, sometimes we need to use different types of operators to compare values. These operators are called comparison operators.

// Here is a list of some handy comparison operators and their syntax:

// Less than: <
// Greater than: >
// Less than or equal to: <=
// Greater than or equal to: >=
// Is equal to: ===
// Is not equal to: !==
// Comparison operators compare the value on the left with the value on the right. For instance:

// 10 < 12 // Evaluates to true
// It can be helpful to think of comparison statements as questions. When the answer is “yes”, the statement evaluates to true, and when the answer is “no”, the statement evaluates to false. The code above would be asking: is 10 less than 12? Yes! So 10 < 12 evaluates to true.

// We can also use comparison operators on different data types like strings:

// 'apples' === 'oranges' // false
// In the example above, we’re using the identity operator (===) to check if the string 'apples' is the same as the string 'oranges'. Since the two strings are not the same, the comparison statement evaluates to false.

// All comparison statements evaluate to either true or false and are made up of:

// Two values that will be compared.
// An operator that separates the values and compares them accordingly (>, <, <=,>=,===,!==).
// Let’s practice using these comparison operators!

let hungerLevel = 7;

if(hungerLevel > 7){
  console.log('Time to eat!');
} else { 
  console.log('We can eat later!')
}



Logical Operators
// Working with conditionals means that we will be using booleans, true or false values. In JavaScript, there are operators that work with boolean values known as logical operators. We can use logical operators to add more sophisticated logic to our conditionals. There are three logical operators:

// the and operator (&&)
// the or operator (||)
// the not operator, otherwise known as the bang operator (!)
// When we use the && operator, we are checking that two things are true:

// if (stopLight === 'green' && pedestrians === 0) {
//   console.log('Go!');
// } else {
//   console.log('Stop');
// }
// When using the && operator, both conditions must evaluate to true for the entire condition to evaluate to true and execute. Otherwise, if either condition is false, the && condition will evaluate to false and the else block will execute.

// If we only care about either condition being true, we can use the || operator:

// if (day === 'Saturday' || day === 'Sunday') {
//   console.log('Enjoy the weekend!');
// } else {
//   console.log('Do some work.');
// }
// When using the || operator, only one of the conditions must evaluate to true for the overall statement to evaluate to true. In the code example above, if either day === 'Saturday' or day === 'Sunday' evaluates to true the if‘s condition will evaluate to true and its code block will execute. If the first condition in an || statement evaluates to true, the second condition won’t even be checked. Only if day === 'Saturday' evaluates to false will day === 'Sunday' be evaluated. The code in the else statement above will execute only if both comparisons evaluate to false.

// The ! not operator reverses, or negates, the value of a boolean:

// let excited = true;
// console.log(!excited); // Prints false
 
// let sleepy = false;
// console.log(!sleepy); // Prints true
// Essentially, the ! operator will either take a true value and pass back false, or it will take a false value and pass back true.

// Logical operators are often used in conditional statements to add another layer of logic to our code.

// Instructions
// 1.
// In main.js there are two variables mood and tirednessLevel.

// Let’s create an if...else statement that checks if mood is 'sleepy' and tirednessLevel is greater than 8.

// If both conditions evaluate to true, then console.log() the string 'time to sleep'. Otherwise, we should console.log() 'not bed time yet'.

// After you press “Run”, play around with the || operator and the ! operator! What happens if you negate the value of the entire statement with ! and switch to || instead of &&?

// 

let mood = 'sleepy';
let tirednessLevel = 6;

if(mood === 'sleepy' && tirednessLevel > 8){
  console.log('time to sleep')
} else {
  console.log('not bed time yet')
}

Truthy and Falsy
// Let’s consider how non-boolean data types, like strings or numbers, are evaluated when checked inside a condition.

// Sometimes, you’ll want to check if a variable exists and you won’t necessarily want it to equal a specific value — you’ll only check to see if the variable has been assigned a value.

// Here’s an example:

// let myVariable = 'I Exist!';
 
// if (myVariable) {
//    console.log(myVariable)
// } else {
//    console.log('The variable does not exist.')
// }
// The code block in the if statement will run because myVariable has a truthy value; even though the value of myVariable is not explicitly the value true, when used in a boolean or conditional context, it evaluates to true because it has been assigned a non-falsy value.

// So which values are falsy— or evaluate to false when checked as a condition? The list of falsy values includes:

// 0
// Empty strings like "" or ''
// null which represent when there is no value at all
// undefined which represent when a declared variable lacks a value
// NaN, or Not a Number
// Here’s an example with numbers:

// let numberOfApples = 0;
 
// if (numberOfApples){
//    console.log('Let us eat apples!');
// } else {
//    console.log('No apples left!');
// }
 
// // Prints 'No apples left!'
// The condition evaluates to false because the value of the numberOfApples is 0. Since 0 is a falsy value, the code block in the else statement will run.

// Instructions
// 1.
// Change the value of wordCount so that it is truthy. This value should still be a number.

// After you make this change and run your code, 'Great! You've started your work!' should log to the console.


// Stuck? Get a hint
// 2.
// Change the value of favoritePhrase so that it is still a string but falsy.

// After you make this change and run your code, 'This string is definitely empty.' should log to the console.

let wordCount = 1;

if (wordCount) {
  console.log("Great! You've started your work!");
} else {
  console.log('Better get to work!');
}


let favoritePhrase = '';

if (favoritePhrase) {
  console.log("This string doesn't seem to be empty.");
} else {
  console.log('This string is definitely empty.');
}


CONDITIONAL STATEMENTS
// Truthy and Falsy Assignment
// Truthy and falsy evaluations open a world of short-hand possibilities!

// Say you have a website and want to take a user’s username to make a personalized greeting. Sometimes, the user does not have an account, making the username variable falsy. The code below checks if username is defined and assigns a default string if it is not:

// let username = '';
// let defaultName;
 
// if (username) {
//   defaultName = username;
// } else {
//   defaultName = 'Stranger';
// }
 
// console.log(defaultName); // Prints: Stranger
// If you combine your knowledge of logical operators you can use a short-hand for the code above. In a boolean condition, JavaScript assigns the truthy value to a variable if you use the || operator in your assignment:

// let username = '';
// let defaultName = username || 'Stranger';
 
// console.log(defaultName); // Prints: Stranger
// Because || or statements check the left-hand condition first, the variable defaultName will be assigned the actual value of username if it is truthy, and it will be assigned the value of 'Stranger' if username is falsy. This concept is also referred to as short-circuit evaluation.

// Instructions
// 1.
// Let’s use short-circuit evaluation to assign a value to writingUtensil. Do not edit tool yet, we’ll return to tool in the next step.

// Assign to writingUtensil the value of tool and if tool is falsy, assign a default value of 'pen'.


// Stuck? Get a hint
// 2.
// Notice that text 'The pen is mightier than the sword' logged to the console. Which means the value of writingUtensil is 'pen'.

// What if we reassign the value of tool to 'marker'. Let’s see what happens to the value of writingUtensil.


// 

let tool = '';

// Use short circuit evaluation to assign  writingUtensil variable below:
let writingUtensil

console.log(`The ${writingUtensil} is mightier than the sword.`);
